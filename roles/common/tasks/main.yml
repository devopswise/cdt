---
# This is a temporary workaround to avoid aws bills for development
- name: Schedule to turn off system after 2 hours
  command: shutdown -P +120
  become: yes
  become_method: sudo
  when: cdt_shutdown_after_2h == "true"

- name: Remove swapfile from /etc/fstab
  mount:
    name: swap
    fstype: swap
    state: absent
  become: yes
  become_method: sudo

- name: Disable swap
  command: swapoff -a
  become: yes
  become_method: sudo

- name: remove from fstab
  action: lineinfile dest=/etc/fstab regexp=" swap " state=absent
  become: yes
  become_method: sudo

# Only for centos
- name: remove postfix
  package:
    name: postfix
    state: absent
  become: yes
  become_method: sudo

- name: Disable SELinux
  selinux:
    state: disabled
  become: yes
  become_method: sudo

- name: Disable SELinux imme.
  command: setenforce 0
  become: yes
  become_method: sudo

- name: Stop and disable firewalld
  service:
    name: firewalld
    state: stopped
    enabled: no
  become: yes
  become_method: sudo

- name: Create base directories
  file: path="{{ item }}" state=directory mode=0777 owner="0" group="0"
  with_items:
    - "{{ docker_logs }}"
    - "{{ docker_volumes }}"
    - "{{ docker_certs }}"
    - "{{ docker_data }}"
  become: yes
  become_method: sudo

- name: Install yum-config-manager
  package: name={{ item }} state=latest
  with_items:
    - "yum-utils"
  become: yes
  become_method: sudo

# enable extra
- name: enable extras for epel
  command: "{{ item }}"
  with_items:
    - "yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo"
    - "yum -y --enablerepo=extras install epel-release"
  become: yes
  become_method: sudo

- name: Install system packages
  package: name={{ item }} state=latest
  with_items:
    - "sysstat"
    - "python-setuptools"
    - "docker-ce"
    - "python-pip"
    - "git"
  become: yes
  become_method: sudo

- name: Install python packages
  pip: name={{ item }} state=latest
  with_items:
    - "docker==3.2.0"
    - "requests==2.18.4"
    - "s3cmd"
    - "docker-compose==1.15.0"
  become: yes
  become_method: sudo

- name: Ensures /etc/systemd/system/docker.service.d dir exists
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
  become: yes
  become_method: sudo

- name: enable docker remote api
  template:
    src: docker-external.conf.j2
    dest: /etc/systemd/system/docker.service.d/docker-external.conf
    mode: 0644
  become: yes
  become_method: sudo

- name: Create /etc/docker directories
  file: path="/etc/docker" state=directory mode=0755 owner="0" group="0"
  become: yes
  become_method: sudo

- name: enable docker metrics
  template: src=docker-daemon-js.j2 dest=/etc/docker/daemon.json mode=644
  become: yes
  become_method: sudo

- name: start docker
  service: name=docker state=started
  become: yes
  become_method: sudo

- name: copy s3cmd config
  template:
    src: s3cmd.cfg
    dest: /etc/s3cmd.cfg
    mode: 0644
  become: yes
  become_method: sudo

- name: copy s3cmd binary wraper
  copy:
    src: s3cmd
    dest: /usr/local/bin/s3cmd
    mode: 0775
  become: yes
  become_method: sudo

- name: generate self-signed ssl certificate if not exists
  delegate_to: localhost
  stat:
    path: ../credentials/{{ base_domain }}.crt
  register: http_ssl_crt

- name: generate self-signed ssl certificate if not exists
  delegate_to: localhost
  stat:
    path: ../credentials/{{ base_domain }}.key
  register: http_ssl_key

- name: create openssl configuration file
  template:
    src: openssl_req.cfg.j2
    dest: ../credentials/openssl_req.cfg
  delegate_to: localhost

- name: generate self-signed ssl certificate if not exists
  local_action:
    module: shell
    _raw_params: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -sha256 -subj "/C=UK/ST=LO/O=devopswise/CN=*.{{ base_domain }}" -keyout ../credentials/{{ base_domain }}.key -out ../credentials/{{ base_domain }}.crt -config ../credentials/openssl_req.cfg
  when: not (http_ssl_key.stat.exists and http_ssl_crt.stat.exists)
  tags:
    - skip_ansible_lint

- name: copy generated certificates to cert folder
  copy:
    src: ../credentials/{{ base_domain }}.crt
    dest: "{{ docker_certs }}/{{ base_domain }}.crt"

- name: copy generated certificates to cert folder
  copy:
    src: ../credentials/{{ base_domain }}.key
    dest: "{{ docker_certs }}/{{ base_domain }}.key"

- name: generate-cacert.sh file
  template:
    src: generate-cacert.sh.j2
    dest: "{{ docker_certs }}/generate-cacert.sh"
    mode: 0755
  become: yes
  become_method: sudo

- name: Run cacert generation script
  shell: "cd {{ docker_certs }} && {{ docker_certs }}/generate-cacert.sh"
  become: yes
  become_method: sudo

# TODO: https://stackoverflow.com/a/41493058
- name: Create an internal network
  docker_network:
    name: internal
    state: present
  become: yes
  become_method: sudo

- name: Create an external network
  docker_network:
    name: external
    state: present
  become: yes
  become_method: sudo

- name: Disable IPv6 with sysctl
  sysctl: name={{ item }} value=1 state=present
  with_items:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
    - net.ipv6.conf.lo.disable_ipv6
  become: yes
  become_method: sudo

- name: set swappiness value to 10
  sysctl:
    name: vm.swappiness
    value: 10
    state: present
  become: yes
  become_method: sudo

- name: set ip forward 1
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present
  become: yes
  become_method: sudo

- name: Configure default profile
  lineinfile: dest=/etc/profile line="{{ item }}" state=present
  become: yes
  become_method: sudo
  with_items:
    - "unset TMOUT"
    - export PS1='\t \u@\h:\W$ '

- name: Configure rsyslog to listen on 514/UDP for 127.0.0.1
  lineinfile: dest=/etc/rsyslog.conf line="{{ item }}" state=present insertafter=".*MODULES.*"
  become: yes
  become_method: sudo
  with_items:
    - "$IncludeConfig /etc/rsyslog.d/*.conf"
    - "$UDPServerRun 514"
    - "$UDPServerAddress 127.0.0.1"
    - "$ModLoad imudp"
  notify:
    - restart rsyslog

- name: cleanup rsyslog old file format
  lineinfile: dest=/etc/rsyslog.conf
              regexp="^\$ActionFileDefaultTemplate"
              state=absent
  become: yes
  become_method: sudo
  notify:
    - restart rsyslog

- name: Configure rsyslog file format
  lineinfile: dest=/etc/rsyslog.conf
              line="$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat"
              insertbefore="^\$IncludeConfig"
              state=present
  become: yes
  become_method: sudo
  notify:
    - restart rsyslog

- name: create rsyslog config for docker
  template:
    src: 10-docker.conf
    dest: /etc/rsyslog.d/10-docker.conf
    mode: 0644
  become: yes
  become_method: sudo

- name: ensure the directory exists
  file: dest=/opt/docker-logs/docker state=directory
  become: yes
  become_method: sudo
  notify:
    - restart rsyslog

- name: schedule logrotate hourly
  copy: src=logrotate.cron dest=/etc/cron.hourly/logrotate mode=0700
  become: yes
  become_method: sudo

