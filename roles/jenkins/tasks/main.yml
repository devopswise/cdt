---
- name: Create a directory to store volume
  file: path="{{ item }}" state=directory mode=0777 owner="{{ jenkins_user }}" group="{{ jenkins_group }}"
  with_items:
    - "{{ docker_logs }}/{{ jenkins_service_name }}"
    - "{{ docker_volumes }}/{{ jenkins_service_name }}"
  become: yes
  become_method: sudo

- name: create directory for project_src
  file: path="/tmp/{{ jenkins_service_name }}" state=directory
  become: yes
  become_method: sudo

- name: generate a random mysql password
  set_fact:
    openldap_slapd_pass: "{{ lookup('password', '../credentials/openldap_slapd_pass length=12') }}"
    openldap_admin_pass: "{{ lookup('password', '../credentials/openldap_admin_pass length=12') }}"
    openldap_persona_alice_pass: "{{ lookup('password', '../credentials/openldap_persona_alice_pass length=12') }}"
    openldap_persona_bob_pass: "{{ lookup('password', '../credentials/openldap_persona_bob_pass length=12') }}"

- name: sync docker-compose.yml
  template: 
    src: ../templates/docker-compose.yml.j2
    dest: /tmp/{{ jenkins_service_name }}/docker-compose.yml
    mode: 0755
  become: yes
  become_method: sudo

- name: "Run jenkins service {{ jenkins_version }}"
  become: yes
  become_method: sudo
  docker_service:
    project_name: "{{ jenkins_service_name }}"
    project_src: "/tmp/{{ jenkins_service_name }}"
  register: output

- name: create reference job
  template:
    src: ../templates/multibranch-pipeline-job.xml.j2
    dest: /tmp/{{ jenkins_service_name }}/hrweb-java.xml
    mode: 0755
  become: yes
  become_method: sudo

- name: Wait untils Jenkins web API is available
  shell: "curl -k --head --silent https://{{ jenkins_service_name }}.{{ base_domain }}/login?from=%2F"
  register: result
  until: result.stdout.find("200 OK") != -1
  retries: 20
  delay: 5

- name: Create reference job using REST API
  shell: "curl -k -s -XPOST https://{{ jenkins_service_name }}.{{ base_domain }}/createItem?name=hrweb-java -u alice.developer:{{ openldap_persona_alice_pass }} --data-binary @/tmp/{{ jenkins_service_name }}/hrweb-java.xml -H 'Content-Type:text/xml'"

- name: copy key file
  copy:
    src:  '/opt/cdt/grafana/jenkins.pem'
    dest: '/opt/docker-volumes/jenkins/jenkins.pem'

- name: generate jenkins API
  when: false
  uri:
    url: 'https://{{ jenkins_service_name }}.{{ base_domain }}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
    user: admin
    password: "{{ openldap_admin_pass }}"
    force_basic_auth: yes
    return_content: yes
    validate_certs: no
  register: crumb

- name: set key
  set_fact:
    jenkins_ssh_key: "{{lookup('file', '/opt/cdt/grafana/jenkins.pem') }}"

- name: insert ssh key
  uri:
    method: POST
    url: 'https://{{ jenkins_service_name }}.{{ base_domain }}/credentials/store/system/domain/_/createCredentials'
    user: admin
    password: "{{ openldap_admin_pass }}"
    force_basic_auth: yes
    validate_certs: no
    #headers:
    #  Jenkins-Crumb: "{{ crumb.content.split(':')[1] }}"
    body: |
      json={
        "": "0",
        "credentials": {
          "scope": "GLOBAL",
          "id": "jenkins-ssh-slave-user",
          "username": "user",
          "password": "",
          "privateKeySource": {
          "stapler-class": "com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey$FileOnMasterPrivateKeySource",
             "privateKeyFile": "/var/jenkins_home/jenkins.pem"
          },
          "description": "jenkins-ssh-slave-user",
          "stapler-class": "com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey"
        }
      }

