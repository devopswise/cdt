---
- name: Create a directory to store volume
  file: path="{{ item }}" state=directory mode=0777 owner="{{ traefik_user }}" group="{{ traefik_group }}"
  with_items:
    - "{{ docker_logs }}/{{ traefik_service_name }}"
    - "{{ docker_volumes }}/{{ traefik_service_name }}"
    - "{{ docker_volumes }}/{{ traefik_service_name }}/certs"
  become: yes
  become_method: sudo

- name: create directory for project_src
  file: path="/tmp/{{ traefik_service_name }}" state=directory
  become: yes
  become_method: sudo

- name: generate traefik password
  set_fact:
    traefik_admin_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits') }}"

- name: save generated password locally
  shell: echo "{{ traefik_admin_password }}" > ../credentials/traefik_admin_pass
  delegate_to: localhost

- name: generate a random md5password for traefik
  shell: htpasswd -nb admin "{{ traefik_admin_password }}" | cut -d':' -f2 > ../credentials/traefik_admin_pass_hash_md5
  delegate_to: localhost

- name: load generated md5password
  set_fact:
    traefik_admin_pass_hash: "{{ lookup('password', '../credentials/traefik_admin_pass_hash_md5 chars=ascii_letters,digits,hexdigits length=12') }}"

- name: generate self-signed ssl certificate if not exists
  stat:
    path: ../credentials/traefik_http_ssl.crt
  register: traefik_http_ssl_crt
  delegate_to: localhost

- name: generate self-signed ssl certificate if not exists
  stat:
    path: ../credentials/traefik_http_ssl.key
  delegate_to: localhost
  register: traefik_http_ssl_key

- name: create openssl configuration file
  template: 
    src: openssl_req.cfg.j2
    dest: ../credentials/openssl_req.cfg
  delegate_to: localhost

- name: generate self-signed ssl certificate if not exists
  shell:
    _raw_params: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -sha256 -subj "/C=UK/ST=LO/O=devopswise/CN=*.{{ base_domain }}" -keyout ../credentials/traefik_http_ssl.key -out ../credentials/traefik_http_ssl.crt -config ../credentials/openssl_req.cfg
  when: not (traefik_http_ssl_key.stat.exists and traefik_http_ssl_crt.stat.exists)
  delegate_to: localhost

- name: copy generated certificates to cert folder
  copy: src=../credentials/traefik_http_ssl.crt dest={{ docker_volumes }}/{{ traefik_service_name }}/certs/{{ base_domain }}.crt

- name: copy generated certificates to cert folder
  copy: src=../credentials/traefik_http_ssl.key dest={{ docker_volumes }}/{{ traefik_service_name }}/certs/{{ base_domain }}.key

- name: sync docker-compose.yml
  template:
    src: docker-compose.yml.j2
    dest: /tmp/{{ traefik_service_name }}/docker-compose.yml
    mode: 0755
  become: yes
  become_method: sudo

- name: sync traefik.toml (letsencrypt)
  template:
    src: traefik.toml.https.j2
    dest: "{{ docker_volumes }}/{{ traefik_service_name }}/traefik.toml"
    mode: 0755
  become: yes
  become_method: sudo
  when: http_ssl_certificate_generation == "letsencrypt"

- name: sync traefik.toml (no ssl certificate, http)
  template:
    src: traefik.toml.http.j2
    dest: "{{ docker_volumes }}/{{ traefik_service_name }}/traefik.toml"
    mode: 0755
  become: yes
  become_method: sudo
  when: http_ssl_certificate_generation == "none"

- name: sync traefik.toml (use self-signed https certificate)
  template:
    src: traefik.toml.selfsigned.j2
    dest: "{{ docker_volumes }}/{{ traefik_service_name }}/traefik.toml"
    mode: 0755
  become: yes
  become_method: sudo
  when: http_ssl_certificate_generation == "selfsigned"

- name: ensure file exists
  copy:
    content: "{}"
    dest: "{{ docker_volumes }}/{{ traefik_service_name }}/acme.json"
    force: no
    group: "{{ traefik_group }}"
    owner: "{{ traefik_user }}"
    mode: 0600
  become: yes
  become_method: sudo

- name: "Run traefik service {{ traefik_version }}"
  become: yes
  become_method: sudo
  docker_service:
    project_name: "{{ traefik_service_name }}"
    project_src: "/tmp/{{ traefik_service_name }}"

- name: Remove docker-compose.yml
  when: false
  file:
    state: absent
    path: "/tmp/{{ traefik_service_name }}/docker-compose.yml"
  become: yes
  become_method: sudo
