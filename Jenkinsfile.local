pipeline {
  agent { label 'jenkins-jnlp-slave-docker-cli' }
  
  parameters { string(defaultValue: "master", description: 'What branch?', name: 'branchName')
               string(defaultValue: "srvpre01", description: 'Which server?', name: 'vmName') 
               string(defaultValue: "precdt", description: 'Server fqdn?', name: 'serverFqdn')
               string(defaultValue: "site.yml", description: 'Which playbook?', name: 'playbook')
  }

  environment { 
      CDT_BRANCH="${params.branchName}"
      CDT_SERVER_FQDN="${params.serverFqdn}"
      CDT_TARGET_VM="${params.vmName}"
      CDT_PLAYBOOK="${params.playbook}" 
  }

  stages {
    stage('run cdt-installer'){
      steps {
            withCredentials([sshUserPrivateKey(credentialsId: "devopswise", keyFileVariable: 'keyfile')]) {
                sh "ssh -o StrictHostKeyChecking=no -i ${keyfile} root@192.168.0.46 revert-xen-vm-to-latest-snapshot.sh ${CDT_TARGET_VM}"
            }
            sh "sleep 15"
            withCredentials([string(credentialsId: 'AWS_ACCESS_KEY', variable: 'AWS_ACCESS_KEY_ID'),
                            string(credentialsId: 'AWS_SECRET_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                            ]) {
                            wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
                                sh '''docker run -i \
                                    -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
                                    -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
                                    -e DO_NOT_PROVISION_EC2="true" \
                                    -e CDT_BRANCH=${CDT_BRANCH} \
                                    -e CDT_PLAYBOOK=${CDT_PLAYBOOK} \
                                    -e SERVER_FQDN=${CDT_SERVER_FQDN} \
                                    -e KEY_PAIR=dwtools \
                                    -e PEM_FILE=/opt/cdt/dwtools.pem \
                                    -e DEBUG="-vv" \
                                    -v /opt/source/cdt-test/aws:/opt/cdt \
                                    devopswise/cdt-installer:latest "cdt --launch" '''
                            }
            }
       }
    }
  }
}

